image: saisk026/ubuntu-docker:20.04
services:
  - docker:dind

stages:
  - scan
  - build
  - deploy

scan_frontend_dev:
  stage: scan
  image:
    name: aquasec/aqua-scanner
  tags:
    - sk-works
  variables:
    SCAN_TYPE: "fs"
    SECURITY_CHECKS: "vuln"
    VULN_TYPE: "os,library"
    HIDE_PROGRESS: "false"
    FORMAT: "table"
    SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
    IGNORE_UNFIXED: "false"
    EXIT_CODE: "0"
  script:
    - export AQUA_KEY=$AQUA_KEY
    - export AQUA_SECRET=$AQUA_SECRET
    - export GITLAB_TOKEN=$GITLAB_TOKEN
    - export AQUA_URL=https://api.asia-1.supply-chain.cloud.aquasec.com
    - export CSPM_URL=https://asia-1.api.cloudsploit.com
    - export TRIVY_RUN_AS_PLUGIN=aqua
    - export PACKAGE_JSON=1
    - export GRADLE=true
    - export SHOW_SUPPRESSED=true
    - export REACHABILITY=true
    - export OVERRIDE_BRANCH=main
    - trivy $SCAN_TYPE --debug --scanners $SECURITY_CHECKS --severity $SEVERITY --package-json  .
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"


build_frontend_dev:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  environment:
    name: main
  tags:
    - sk-works
  script:
    - echo "Building Sample Python application"
    - echo "Deploying to production for branch ${CI_COMMIT_REF_SLUG}"
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${DOCKER_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${DOCKER_USERNAME}" "${DOCKER_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - echo "Pushing the Python image"
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile" --destination "${DOCKER_USERNAME}/scs-test:docu"
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"


# deploy_frontend_dev:
#   stage: deploy
#   environment:
#     name: development
#   tags:
#     - sk-works
#   before_script:
#     - echo "Installing kubectl"
#     - apt-get update && apt-get install -y apt-transport-https gnupg2 curl
#     - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
#     - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
#     - apt-get update && apt-get install -y kubectl
#     - echo "Installing Docker"
#     - apt-get install -y apt-transport-https ca-certificates curl software-properties-common
#     - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
#     - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
#     - apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io
#     - echo "Creating kubeconfig directory"
#     - mkdir -p /root/.kube
#     - echo "Adding kubeconfig file"
#     - echo "$KUBECONFIG_CONTENT" | base64 -d > /root/.kube/config

#   script:
#     - echo "Rolling out Kubernetes deployment";
#     - kubectl apply -f manifest.yaml -n sk
#     #- kubectl rollout restart deployment/python-app -n sk;
    
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
